

<style>
/* Home Assistant Entities Responsive Layout */

:root {
  --primary-color: #000000;
  --secondary-color: #333333;
  --text-primary: #000000;
  --text-secondary: #666666;
  --border-color: #cccccc;
  --error-color: #000000;
}

/* 1-bit display mode - pure black and white only */
.screen--1bit {
  --primary-color: #000000;
  --secondary-color: #000000;
  --text-primary: #000000;
  --text-secondary: #000000;
  --border-color: #000000;
  --error-color: #000000;
}

body, html {
  color: var(--text-primary);
  line-height: 1.4;
}

#root {
  width: 100%;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.entity-section {
    border-radius: 4px;
    border: 2px solid var(--border-color);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    min-width: 0;
}

.sections-row {
    display: flex;
    flex-wrap: wrap;
    gap: 16px;
    width: 100%;
    max-width: 100%;
    min-width: 0;
}

.sections-row .entity-section {
    flex: 1;
    min-width: 200px;
}

.sections-row:has(.entity-section:only-child) .entity-section {
    flex: 0 1 auto;
    width: 100%;
}

.section-header {
    font-weight: 600;
    position: absolute;
    margin-top: -12px;
    padding-inline: 7px;
    margin-left: 5px;
    background: white;
}

.sections-row .section-content {
  padding: 12px;
}

.entities-grid {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-evenly;
  align-items: flex-start;
}

.entities-grid:has(.entity-card:nth-child(1):nth-last-child(1)) {
  justify-content: center;
}

.entities-grid:has(.entity-card:nth-child(2):nth-last-child(1)) {
  justify-content: space-evenly;
}

.entities-grid:has(.entity-card:nth-child(3):nth-last-child(1)) {
  justify-content: space-between;
}

.entities-grid .entity-card:only-child {
  margin: 0 auto;
}

.entity-card {
    padding: 12px 8px 8px 8px;
  position: relative;
  overflow: hidden;
  flex: 0 1 auto;
  min-width: 80px;
  max-width: 150px;
  margin: 0 auto;
}

.entity-card--detailed .device-class-title {
  margin-bottom: 6px;
}

.entity-card--medium .device-class-title {
  margin-bottom: 6px;
}

.entities-grid--detailed {
    display: flex;
    flex-wrap: wrap;
}

.entities-grid--medium {
  display: flex;
  flex-wrap: wrap;
}

.entity-header {
  display: flex;
  align-items: center;
  margin-bottom: 4px;
  gap: 6px;
}

.entity-icon {
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  background: var(--primary-color);
  color: white;
  flex-shrink: 0;
  border: 1px solid var(--primary-color);
}

.entity-icon img {
  width: 20px;
  height: 20px;
  filter: brightness(0) invert(1);
}

.entity-icon.temperature {
  background: var(--secondary-color);
}

.entity-icon.sensor {
  background: var(--primary-color);
}

.entity-icon.light {
  background: var(--secondary-color);
}

.entity-icon.switch {
  background: var(--primary-color);
}

.entity-icon.conversation {
  background: var(--secondary-color);
}

.entity-icon.error {
  background: var(--error-color);
}

.entity-name {
  font-weight: 500;
  color: var(--text-primary);
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  flex: 1;
}

.entity-value {
  font-weight: 700;
  color: var(--text-primary);
  word-break: break-word;
  overflow-wrap: break-word;
}

.entity-unit {
  color: var(--text-secondary);
  margin-left: 4px;
}

.entity-state {
  color: var(--text-secondary);
  text-transform: capitalize;
}

.entity-error {
  color: var(--error-color);
  font-style: italic;
}

.entity-id {
  color: var(--text-secondary);
  margin-top: 2px;
  opacity: 0.7;
}

/* Loading States */
.loading {
  opacity: 0.5;
}

/* Loading Container */
.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 200px;
  padding: 40px 20px;
  color: var(--text-secondary);
}

.loading-spinner {
  width: 40px;
  height: 40px;
  border: 4px solid var(--border-color);
  border-top: 4px solid var(--primary-color);
  border-radius: 50%;
  margin-bottom: 16px;
}

/* Removed spinning animation for e-ink compatibility */

.loading-text {
  text-align: center;
}



/* Empty State */
.empty-state {
  text-align: center;
  padding: 40px 20px;
  color: var(--text-secondary);
}

.empty-state-icon {
  margin-bottom: 16px;
  opacity: 0.3;
}

/* Responsive Design */
@media (max-width: 768px) {
  #root {
    padding: 12px;
    gap: 12px;
  }
  
  .sections-row {
    flex-direction: column; /* Stack sections vertically on mobile */
    gap: 12px;
  }
  
  .entities-grid {
    justify-content: flex-start; /* On mobile, align cards to start */
    gap: 6px;
  }
  
  .section-content {
    padding: 8px;
  }
  
  .entity-card {
    padding: 6px;
    min-width: 70px; /* Smaller minimum on mobile */
    max-width: 120px; /* Smaller maximum on mobile */
  }
}

@media (max-width: 480px) {
  .entities-grid {
    justify-content: space-between; /* Distribute remaining space on small screens */
    gap: 4px;
  }
  
  .entity-card {
    min-width: 60px;
    max-width: 100px;
  }
  
  .entity-header {
    margin-bottom: 3px;
  }
  
  .entity-icon {
    width: 16px;
    height: 16px;
  }
  
  .entity-icon img {
    width: 10px;
    height: 10px;
  }
}

/* Layout-specific styles */
/* Free layout styles */
.free-layout-container {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  align-items: flex-start;
  gap: 16px;
}

.layout-free .entity-section {
  width: max-content;
  flex: 0 0 auto;
}

.layout-free .entity-card {
  margin: 0;
}

/* Utility Classes */
.text-center {
  text-align: center;
}

.hidden {
  display: none;
}

.value--xxxlarge { font-size: 3rem; }
.value--xxlarge { font-size: 2.5rem; }
.value--xlarge { font-size: 2rem; }
.value--large { font-size: 1.5rem; }
.value--medium { font-size: 1.125rem; }
.value--small { font-size: 1rem; }
.value--xsmall { font-size: 0.875rem; }
.value--xxsmall { font-size: 0.75rem; }
.value--tnums { font-variant-numeric: tabular-nums; }

</style>

<script>

class HomeAssistantRenderer {
  constructor(containerId = 'root') {
    this.container = document.getElementById(containerId);
    this.iconMap = this.createIconMap();
    this.entityStyle = '{{ trmnl.plugin_settings.custom_fields_values.entity_style | default: "simple" }}';
    this.layout = '{{ trmnl.plugin_settings.custom_fields_values.layout | default: "sections" }}';
    this.init();
  }

  init() {
    if (!this.container) {
      return;
    }
    this.container.className = `entities-container layout-${this.layout}`;
  }

  createIconMap() {
    return {
      // Domain-based icons
      'light': 'mdi:lightbulb',
      'switch': 'mdi:toggle-switch',
      'sensor': 'mdi:chart-line',
      'climate': 'mdi:thermostat',
      'cover': 'mdi:window-shutter',
      'fan': 'mdi:fan',
      'lock': 'mdi:lock',
      'media_player': 'mdi:speaker',
      'camera': 'mdi:camera',
      'alarm_control_panel': 'mdi:security',
      'automation': 'mdi:cog',
      'script': 'mdi:script-text',
      'scene': 'mdi:palette',
      'input_boolean': 'mdi:checkbox-marked',
      'input_number': 'mdi:numeric',
      'input_select': 'mdi:format-list-bulleted',
      'input_text': 'mdi:form-textbox',
      'timer': 'mdi:timer',
      'counter': 'mdi:counter',
      'person': 'mdi:account',
      'device_tracker': 'mdi:map-marker',
      'zone': 'mdi:map',
      'sun': 'mdi:weather-sunny',
      'weather': 'mdi:weather-partly-cloudy',
      'conversation': 'mdi:message-text',
      'notify': 'mdi:bell',
      'tts': 'mdi:volume-high',
      'group': 'mdi:account-group',
      'homeassistant': 'mdi:home-assistant',
      
      // Device class specific icons
      'temperature': 'mdi:thermometer',
      'humidity': 'mdi:water-percent',
      'pressure': 'mdi:gauge',
      'battery': 'mdi:battery',
      'illuminance': 'mdi:brightness-6',
      'motion': 'mdi:motion-sensor',
      'door': 'mdi:door',
      'window': 'mdi:window-closed',
      'smoke': 'mdi:smoke-detector',
      'gas': 'mdi:gas-cylinder',
      'power': 'mdi:flash',
      'energy': 'mdi:lightning-bolt',
      'current': 'mdi:current-ac',
      'voltage': 'mdi:sine-wave',
      'frequency': 'mdi:waveform',
      'signal_strength': 'mdi:signal',
      'connectivity': 'mdi:wifi',
      'co2': 'mdi:molecule-co2',
      'pm25': 'mdi:air-filter',
      
      // Fallback icons
      'default': 'mdi:information',
      'error': 'mdi:alert-circle',
      'unknown': 'mdi:help-circle'
    };
  }

  getEntityIcon(entity) {
    if (entity.error) {
      return this.iconMap.error;
    }

    const entityId = entity.entity_id || '';
    const domain = entityId.split('.')[0];
    const deviceClass = entity.attributes?.device_class;
    
    if (deviceClass && this.iconMap[deviceClass]) {
      return this.iconMap[deviceClass];
    }
    
    if (domain && this.iconMap[domain]) {
      return this.iconMap[domain];
    }
    
    return this.iconMap.default;
  }

  getEntityName(entity) {
    if (entity.error) {
      return 'Error';
    }
    
    return entity.attributes?.friendly_name || entity.entity_id || 'Unknown Entity';
  }

  getDeviceClassTitle(entity) {
    if (entity.error) {
      return null;
    }
    
    const deviceClass = entity.attributes?.device_class;
    if (!deviceClass) {
      return null;
    }
    
    // Capitalize first letter and replace underscores with spaces
    return deviceClass.charAt(0).toUpperCase() + deviceClass.slice(1).replace(/_/g, ' ');
  }

  formatEntityState(entity) {
    if (entity.error) {
      return {
        value: entity.error,
        unit: '',
        isError: true,
        isNumeric: false
      };
    }

    const state = entity.state;
    const unit = entity.attributes?.unit_of_measurement || '';
    
    // Handle special states
    if (state === 'on' || state === 'off') {
      return {
        value: state.toUpperCase(),
        unit: '',
        isError: false,
        isNumeric: false
      };
    }
    
    // Handle numeric values
    if (!isNaN(state) && state !== '') {
      const numValue = parseFloat(state);
      return {
        value: numValue % 1 === 0 ? numValue.toString() : numValue.toFixed(1),
        unit: unit,
        isError: false,
        isNumeric: true
      };
    }
    
    // Handle datetime values
    if (state && state.includes('T') && state.includes(':')) {
      try {
        const date = new Date(state);
        return {
          value: date.toLocaleString(),
          unit: '',
          isError: false,
          isNumeric: false
        };
      } catch (e) {
        // If date parsing fails, return as is
      }
    }
    
    return {
      value: state || 'N/A',
      unit: unit,
      isError: false,
      isNumeric: false
    };
  }

  /**
   * Get CSS class for entity icon based on domain
   */
  getEntityIconClass(entity) {
    if (entity.error) {
      return 'entity-icon error';
    }
    
    const entityId = entity.entity_id || '';
    const domain = entityId.split('.')[0];
    const deviceClass = entity.attributes?.device_class;
    
    const iconClass = deviceClass || domain || 'default';
    return `entity-icon ${iconClass}`;
  }

  formatIconForUrl(iconName) {
    if (!iconName) {
      return 'mdi:help-circle';
    }
    
    if (iconName.includes(':')) {
      return iconName;
    }
    
    if (iconName.startsWith('mdi-')) {
      return iconName.replace('mdi-', 'mdi:');
    }
    
    return `mdi:${iconName}`;
  }

  createEntityCard(entity, label) {
    const name = this.getEntityName(entity);
    const icon = this.getEntityIcon(entity);
    const iconClass = this.getEntityIconClass(entity);
    const stateInfo = this.formatEntityState(entity);
    const deviceClassTitle = this.getDeviceClassTitle(entity);
    
    const baseCardClass = entity.error ? 'entity-card error' : 'entity-card';
    let cardClass = baseCardClass;
    if (this.entityStyle === 'detailed') {
      cardClass = `${baseCardClass} entity-card--detailed`;
    } else if (this.entityStyle === 'medium') {
      cardClass = `${baseCardClass} entity-card--medium`;
    }
    
    const formattedIcon = this.formatIconForUrl(icon);
    const iconUrl = `https://api.iconify.design/${formattedIcon}.svg`;
    
    if (this.entityStyle === 'detailed') {
      return `
        <div class="${cardClass}" data-entity-id="${entity.entity_id || 'error'}" data-label="${label}">
          ${deviceClassTitle ? `<div class="device-class-title value value--xsmall">${deviceClassTitle}</div>` : ''}
          <div class="entity-header">
            <div class="${iconClass}"><img src="${iconUrl}" alt="${name}" onerror="this.style.display='none'"></div>
            <div class="entity-value value value--small ${stateInfo.isNumeric ? 'value--tnums' : ''} ${stateInfo.isError ? 'entity-error' : ''}">
              ${stateInfo.value}
              ${stateInfo.unit ? `<span class="entity-unit value value--xsmall">${stateInfo.unit}</span>` : ''}
            </div>
          </div>
          ${entity.entity_id ? `<div class="entity-id value value--xxsmall">${entity.entity_id}</div>` : ''}
        </div>
      `;
    }
    
    if (this.entityStyle === 'medium') {
      return `
        <div class="${cardClass}" data-entity-id="${entity.entity_id || 'error'}" data-label="${label}">
          ${deviceClassTitle ? `<div class="device-class-title value value--xsmall">${deviceClassTitle}</div>` : ''}
          <div class="entity-header">
            <div class="${iconClass}"><img src="${iconUrl}" alt="${name}" onerror="this.style.display='none'"></div>
            <div class="entity-value value value--small ${stateInfo.isNumeric ? 'value--tnums' : ''} ${stateInfo.isError ? 'entity-error' : ''}">
              ${stateInfo.value}
              ${stateInfo.unit ? `<span class="entity-unit value value--xsmall">${stateInfo.unit}</span>` : ''}
            </div>
          </div>
        </div>
      `;
    }
    
    // Simple style (original)
    return `
      <div class="${cardClass}" data-entity-id="${entity.entity_id || 'error'}" data-label="${label}">
        <div class="entity-header">
          <div class="${iconClass}"><img src="${iconUrl}" alt="${name}" onerror="this.style.display='none'"></div>
          <div class="entity-value value value--small ${stateInfo.isNumeric ? 'value--tnums' : ''} ${stateInfo.isError ? 'entity-error' : ''}">
            ${stateInfo.value}
            ${stateInfo.unit ? `<span class="entity-unit value value--xsmall">${stateInfo.unit}</span>` : ''}
          </div>
        </div>
      </div>
    `;
  }

  createEntitySection(label, entities) {
    const entitiesHtml = entities
      .map(entity => this.createEntityCard(entity, label))
      .join('');
    
    let gridClass = 'entities-grid';
    if (this.entityStyle === 'detailed') {
      gridClass = 'entities-grid--detailed';
    } else if (this.entityStyle === 'medium') {
      gridClass = 'entities-grid--medium';
    }
    
    return `
      <div class="entity-section" data-label="${label}">
        <div class="section-header">
          <span class="value value--xsmall">${label}</span>
        </div>
        <div class="section-content">
          <div class="${gridClass}">
            ${entitiesHtml}
          </div>
        </div>
      </div>
    `;
  }

  render(responsesByLabel) {
    if (!this.container) {
      return;
    }

    const loadingIndicator = document.getElementById('loading-indicator');
    if (loadingIndicator) {
      loadingIndicator.style.display = 'none';
    }

    this.container.innerHTML = '';

    const labels = Object.keys(responsesByLabel);
    
    if (labels.length === 0) {
      this.renderEmptyState();
      return;
    }

    const sections = labels.map(label => {
      const entities = responsesByLabel[label] || [];
      return this.createEntitySection(label, entities);
    });

    if (this.layout === 'sections') {
      const rows = [];
      for (let i = 0; i < sections.length; i += 2) {
        const sectionsInRow = sections.slice(i, i + 2);
        rows.push(`<div class="sections-row">${sectionsInRow.join('')}</div>`);
      }
      this.container.innerHTML = rows.join('');
    } else {
      // For free layout, wrap all sections in a free-layout container
      this.container.innerHTML = `<div class="free-layout-container">${sections.join('')}</div>`;
    }
  }

  /**
   * Render empty state when no data is available
   */
  renderEmptyState() {
    this.container.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon value value--xxxlarge">⚠</div>
        <h3 class="value value--large">No entities found</h3>
        <p class="value value--small">Check your Home Assistant configuration and ensure entities are properly configured.</p>
      </div>
    `;
  }

  /**
   * Update specific entity data (for real-time updates)
   */
  updateEntity(entityId, newData) {
    const card = this.container.querySelector(`[data-entity-id="${entityId}"]`);
    if (card) {
      const label = card.getAttribute('data-label');
      card.outerHTML = this.createEntityCard(newData, label);
    }
  }

  /**
   * Refresh all data
   */
  refresh(responsesByLabel) {
    this.render(responsesByLabel);
  }
}

// Initialize Home Assistant renderer function
function initializeHomeAssistantRenderer() {
  try {
    // Data preparation from Liquid template
    let entitiesList = `{{ trmnl.plugin_settings.custom_fields_values.entities | escape }}`;
    let entitiesLines = entitiesList.split('\n').filter(line => line.trim() !== '');
    let labels = entitiesLines.map(line => {
      if (line.includes(':')) {
        return line.split(':')[0].trim();
      }
      return 'Default'; // Default label if no colon found
    });

    let responses = [
      {{ IDX_0 | json }}, {{ IDX_1 | json }}, {{ IDX_2 | json }}, {{ IDX_3 | json }}, 
      {{ IDX_4 | json }}, {{ IDX_5 | json }}, {{ IDX_6 | json }}, {{ IDX_7 | json }}, 
      {{ IDX_8 | json }}, {{ IDX_9 | json }}, {{ IDX_10 | json }}, {{ IDX_11 | json }}, 
      {{ IDX_12 | json }}, {{ IDX_13 | json }}, {{ IDX_14 | json }}, {{ IDX_15 | json }}, 
      {{ IDX_16 | json }}, {{ IDX_17 | json }}, {{ IDX_18 | json }}, {{ IDX_19 | json }}, 
      {{ IDX_20 | json }}
    ];
    
    // Filter out null/undefined responses
    let validResponses = [];
    let validLabels = [];
    
    for (let i = 0; i < responses.length && i < labels.length; i++) {
      if (responses[i] !== null && responses[i] !== undefined) {
        validResponses.push(responses[i]);
        validLabels.push(labels[i]);
      }
    }


    // Group responses by label
    const responsesByLabel = {};
    validLabels.forEach((label, index) => {
      if (!responsesByLabel[label]) {
        responsesByLabel[label] = [];
      }
      responsesByLabel[label].push(validResponses[index]);
    });

    // Check if we have a root container
    const rootElement = document.getElementById('root');
    if (!rootElement) {
      return;
    }

    const renderer = new HomeAssistantRenderer('root');
    renderer.render(responsesByLabel);
  } catch (error) {
    // Show error state in the UI
    const rootElement = document.getElementById('root');
    if (rootElement) {
      rootElement.innerHTML = `
        <div style="padding: 20px; text-align: center; color: #f44336;">
          <h3 class="value value--large">❌ Error Loading Home Assistant Data</h3>
          <p class="value value--small">Please check the browser console for details.</p>
          <pre class="value value--xsmall" style="background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 4px; text-align: left; overflow: auto;">${error.message}</pre>
        </div>
      `;
    }
  }
}
</script>

<div id="loading-indicator" class="loading-container">
  <div class="loading-spinner"></div>
  <div class="loading-text value">Loading Home Assistant Entities...</div>
</div>

<div id="root">
  <!-- Entities will be rendered here -->
</div>

<script>
// Initialize the Home Assistant renderer when DOM is ready
document.addEventListener('DOMContentLoaded', function() {  
  try {
    initializeHomeAssistantRenderer();
    
    // Signal to TRMNL that the page is ready for screenshot
    if (window.trmnl) {
      window.trmnl.ready();
    } else {
      // Fallback: dispatch a custom event that TRMNL might listen for
      document.dispatchEvent(new CustomEvent('trmnl-ready'));
      
      // Additional fallback: set a global flag
      window.trmnlReady = true;
    }
  } catch (error) {    
    // Even if there's an error, signal TRMNL so it doesn't wait indefinitely
    if (window.trmnl) {
      window.trmnl.ready();
    } else {
      document.dispatchEvent(new CustomEvent('trmnl-ready'));
      window.trmnlReady = true;
    }
  }
});

// Fallback for older browsers or if DOMContentLoaded already fired
if (document.readyState === 'complete' || document.readyState === 'interactive') {
  setTimeout(() => {
    try {
      initializeHomeAssistantRenderer();
      
      if (window.trmnl) {
        window.trmnl.ready();
      } else {
        document.dispatchEvent(new CustomEvent('trmnl-ready'));
        window.trmnlReady = true;
      }
    } catch (error) {
      if (window.trmnl) {
        window.trmnl.ready();
      } else {
        document.dispatchEvent(new CustomEvent('trmnl-ready'));
        window.trmnlReady = true;
      }
    }
  }, 100);
}
</script>
