

<style>
/* Variables & Base */
:root {
  --primary-color: #000000;
  --secondary-color: #333333;
  --text-primary: #000000;
  --text-secondary: #666666;
  --border-color: #cccccc;
  --error-color: #000000;
}
.screen--1bit {
  --primary-color: #000000;
  --secondary-color: #000000;
  --text-primary: #000000;
  --text-secondary: #000000;
  --border-color: #000000;
  --error-color: #000000;
}
.text-scale--normal { font-size: 1rem; }
.text-scale--lg { font-size: 1.25rem; }
.text-scale--xl { font-size: 1.5rem; }
body, html { color: var(--text-primary); line-height: 1.4; }

/* Layout */
#root {
  font-family: 'Inter', 'NicoClean', sans-serif;
  width: 100%;
  height: 100vh;
  display: flex;
  position: relative;
  overflow: hidden;
}
.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 12px;
  overflow: hidden;
  z-index: 1;
}
#root:has(.pills-container--left) { flex-direction: row; }
#root:has(.pills-container--right) { flex-direction: row-reverse; }
#root:has(.pills-container--top) { flex-direction: column; }
#root:has(.pills-container--bottom) { flex-direction: column-reverse; }
.sections-row {
  display: flex;
  flex-wrap: wrap;
  gap: 16px;
  width: 100%;
  max-width: 100%;
  min-width: 0;
}
.sections-row .entity-section {
  flex: 1;
  min-width: 200px;
}
.sections-row:has(.entity-section:only-child) .entity-section {
  flex: 0 1 auto;
  width: 100%;
}
.free-layout-container {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  gap: 16px;
}

/* Entity Sections & Cards */
.entity-section {
  border: 2px solid var(--border-color);
  border-radius: 4px;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  min-width: 0;
}
.section-header {
  font-weight: 700;
  position: absolute;
  margin: -0.8em 0 0 5px;
}
.section-header .value {
  padding-inline: 8px;
  background: white;
  color: var(--text-primary);
}
.sections-row .section-content { padding: 12px; }
.entities-grid, .entities-grid--detailed, .entities-grid--medium {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-evenly;
  align-items: flex-start;
}
.entities-grid:has(.entity-card:nth-child(1):nth-last-child(1)) { justify-content: center; }
.entities-grid:has(.entity-card:nth-child(2):nth-last-child(1)) { justify-content: space-evenly; }
.entities-grid:has(.entity-card:nth-child(3):nth-last-child(1)) { justify-content: space-between; }
.entities-grid .entity-card:only-child { margin: 0 auto; }
.entity-card {
  padding: 12px 8px 8px;
  position: relative;
  overflow: hidden;
  flex: 0 1 auto;
  min-width: 80px;
  margin: 0 auto;
}
.entity-card--detailed .device-class-title, .entity-card--medium .device-class-title { margin-bottom: 6px; }
.entity-header {
  display: flex;
  align-items: center;
  margin-bottom: 4px;
  gap: 6px;
}

/* Icons & Entity Content */
.entity-icon {
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  background: var(--primary-color);
  color: white;
  flex-shrink: 0;
  border: 1px solid var(--primary-color);
}
.entity-icon img {
  width: 20px;
  height: 20px;
  filter: brightness(0) invert(1);
}
.entity-icon.sensor, .entity-icon.switch { background: var(--primary-color); }
.entity-icon.light, .entity-icon.conversation, .entity-icon.temperature { background: var(--secondary-color); }
.entity-icon.error { background: var(--error-color); }
.entity-name {
  font-weight: 500;
  color: var(--text-primary);
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  flex: 1;
}
.entity-value {
  font-weight: 700;
  color: var(--text-primary);
  word-break: break-word;
  overflow-wrap: break-word;
}
.entity-unit {
  color: var(--text-secondary);
  margin-left: 4px;
}
.entity-state {
  color: var(--text-secondary);
  text-transform: capitalize;
}
.entity-error {
  color: var(--error-color);
  font-style: italic;
}
.entity-id {
  color: var(--text-secondary);
  margin-top: 2px;
  opacity: 0.7;
}

/* Empty State & Pills */
.empty-state {
  text-align: center;
  padding: 40px 20px;
  color: var(--text-secondary);
}
.empty-state-icon {
  margin-bottom: 16px;
  opacity: 0.3;
}
.pills-container {
  display: flex;
  gap: 8px;
}
.pills-container--top, .pills-container--bottom {
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
  width: 100%;
}
.pills-container--top { margin-bottom: 15px; }
.pills-container--left {
  flex-direction: column;
  align-items: flex-start;
  height: 100vh;
  width: auto;
  min-width: 50px;
}
.pills-container--right {
  flex-direction: column;
  align-items: flex-end;
  height: 100vh;
  width: auto;
  min-width: 50px;
}
.pill {
  display: inline-flex;
  align-items: center;
  gap: 4px;
  padding: 4px 8px;
  border-radius: 12px;
  border: 2px solid var(--border-color);
  background: white;
  color: var(--text-primary);
  white-space: nowrap;
  min-height: 24px;
}
.pill-icon {
  width: 1.3em;
  display: flex;
}

/* Vertical Pills & States */
.pills-container--left .pill, .pills-container--right .pill {
  flex-direction: row-reverse;
  writing-mode: vertical-rl;
  text-orientation: mixed;
  min-height: 80px;
  max-width: 32px;
  width: 32px;
  padding: 8px 4px;
}
.pills-container--left .pill-icon, .pills-container--right .pill-icon {
  margin-bottom: 4px;
}
.pills-container--left .pill-value, .pills-container--right .pill-value {
  writing-mode: vertical-rl;
  text-orientation: mixed;
  transform: rotate(180deg);
  white-space: normal;
  text-align: center;
}
.pill.state--on {
  background: var(--primary-color);
  color: white;
  border-color: var(--primary-color);
}
.pill.state--off, .pill.state--unavailable, .pill.state--unknown {
  background: white;
  color: var(--text-secondary);
  border-color: var(--border-color);
}
.pill.state--unavailable, .pill.state--unknown { opacity: 0.6; }
.pill.error {
  background: white;
  color: var(--error-color);
  border-color: var(--error-color);
}
.pill-icon img {
  width: 100%;
  height: 100%;
  filter: brightness(0);
}
.pill.state--on .pill-icon img { filter: brightness(0) invert(1); }
.pill-value {
  font-size: 1em;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.screen--1bit .pill {
  border-color: #000000;
  background: white;
  color: #000000;
}
.screen--1bit .pill.state--on {
  background: #000000;
  color: white;
}

/* Utilities */
.text-center { text-align: center; }
.hidden { display: none; }
.value--xxxlarge { font-size: 3em; }
.value--xxlarge { font-size: 2.5em; }
.value--xlarge { font-size: 2em; }
.value--large { font-size: 1.5em; }
.value--medium { font-size: 1.125em; }
.value--small { font-size: 1em; }
.value--xsmall { font-size: 0.875em; }
.value--xxsmall { font-size: 0.75em; }
.value--tnums { font-variant-numeric: tabular-nums; }

</style>

<script>

class HomeAssistantRenderer {
  constructor(containerId = 'root') {
    this.container = document.getElementById(containerId);
    this.iconMap = this.createIconMap();
    this.entityStyle = '{{ trmnl.plugin_settings.custom_fields_values.entity_style | default: "simple" }}';
    this.layout = '{{ trmnl.plugin_settings.custom_fields_values.layout | default: "sections" }}';
    this.pillPosition = '{{ trmnl.plugin_settings.custom_fields_values.pill_position | default: "top" }}';
    this.textScale = '{{ trmnl.plugin_settings.custom_fields_values.text_scale | default: "normal" }}';
    this.init();
  }

  init() {
    if (!this.container) {
      return;
    }
    this.container.className = `entities-container layout-${this.layout} text-scale--${this.textScale}`;
  }

  createIconMap() {
    return {
      // Domain-based icons
      'light': 'mdi:lightbulb',
      'switch': 'mdi:toggle-switch',
      'sensor': 'mdi:chart-line',
      'climate': 'mdi:thermostat',
      'cover': 'mdi:window-shutter',
      'fan': 'mdi:fan',
      'lock': 'mdi:lock',
      'media_player': 'mdi:speaker',
      'camera': 'mdi:camera',
      'alarm_control_panel': 'mdi:security',
      'automation': 'mdi:cog',
      'script': 'mdi:script-text',
      'scene': 'mdi:palette',
      'input_boolean': 'mdi:checkbox-marked',
      'input_number': 'mdi:numeric',
      'input_select': 'mdi:format-list-bulleted',
      'input_text': 'mdi:form-textbox',
      'timer': 'mdi:timer',
      'counter': 'mdi:counter',
      'person': 'mdi:account',
      'device_tracker': 'mdi:map-marker',
      'zone': 'mdi:map',
      'sun': 'mdi:weather-sunny',
      'weather': 'mdi:weather-partly-cloudy',
      'conversation': 'mdi:message-text',
      'notify': 'mdi:bell',
      'tts': 'mdi:volume-high',
      'group': 'mdi:account-group',
      'homeassistant': 'mdi:home-assistant',
      
      // Device class specific icons
      'temperature': 'mdi:thermometer',
      'humidity': 'mdi:water-percent',
      'pressure': 'mdi:gauge',
      'battery': 'mdi:battery',
      'illuminance': 'mdi:brightness-6',
      'motion': 'mdi:motion-sensor',
      'door': 'mdi:door',
      'window': 'mdi:window-closed',
      'smoke': 'mdi:smoke-detector',
      'gas': 'mdi:gas-cylinder',
      'power': 'mdi:flash',
      'energy': 'mdi:lightning-bolt',
      'current': 'mdi:current-ac',
      'voltage': 'mdi:sine-wave',
      'frequency': 'mdi:waveform',
      'signal_strength': 'mdi:signal',
      'connectivity': 'mdi:wifi',
      'co2': 'mdi:molecule-co2',
      'pm25': 'mdi:air-filter',
      
      // Fallback icons
      'default': 'mdi:information',
      'error': 'mdi:alert-circle',
      'unknown': 'mdi:help-circle'
    };
  }

  getEntityIcon(entity) {
    if (entity.attributes.icon) {
      return entity.attributes.icon;
    }
    if (entity.error) {
      return this.iconMap.error;
    }

    const entityId = entity.entity_id || '';
    const domain = entityId.split('.')[0];
    const deviceClass = entity.attributes?.device_class;
    
    if (deviceClass && this.iconMap[deviceClass]) {
      return this.iconMap[deviceClass];
    }
    
    if (domain && this.iconMap[domain]) {
      return this.iconMap[domain];
    }
    
    return this.iconMap.default;
  }

  getEntityName(entity) {
    if (entity.error) {
      return 'Error';
    }
    
    return entity.attributes?.friendly_name || entity.entity_id || 'Unknown Entity';
  }

  getDeviceClassTitle(entity) {
    if (entity.error) {
      return null;
    }
    
    const deviceClass = entity.attributes?.device_class ?? '';
    
    // Capitalize first letter and replace underscores with spaces
    return entity.attributes?.friendly_name ?? deviceClass.charAt(0).toUpperCase() + deviceClass.slice(1).replace(/_/g, ' ');
  }

  formatEntityState(entity) {
    if (entity.error) {
      return {
        value: entity.error,
        unit: '',
        isError: true,
        isNumeric: false
      };
    }

    const state = entity.state;
    const unit = entity.attributes?.unit_of_measurement || '';
    
    // Handle special states
    if (state === 'on' || state === 'off') {
      return {
        value: state.toUpperCase(),
        unit: '',
        isError: false,
        isNumeric: false
      };
    }
    
    // Handle numeric values
    if (!isNaN(state) && state !== '') {
      const numValue = parseFloat(state);
      return {
        value: numValue % 1 === 0 ? numValue.toString() : numValue.toFixed(1),
        unit: unit,
        isError: false,
        isNumeric: true
      };
    }
    
    // Handle datetime values
    if (state && state.includes('T') && state.includes(':')) {
      try {
        const date = new Date(state);
        return {
          value: date.toLocaleString(),
          unit: '',
          isError: false,
          isNumeric: false
        };
      } catch (e) {
        // If date parsing fails, return as is
      }
    }
    
    return {
      value: state || 'N/A',
      unit: unit,
      isError: false,
      isNumeric: false
    };
  }

  /**
   * Get CSS class for entity icon based on domain
   */
  getEntityIconClass(entity) {
    if (entity.error) {
      return 'entity-icon error';
    }
    
    const entityId = entity.entity_id || '';
    const domain = entityId.split('.')[0];
    const deviceClass = entity.attributes?.device_class;
    
    const iconClass = deviceClass || domain || 'default';
    return `entity-icon ${iconClass}`;
  }

  formatIconForUrl(iconName) {
    if (!iconName) {
      return 'mdi:help-circle';
    }
    
    if (iconName.includes(':')) {
      return iconName;
    }
    
    if (iconName.startsWith('mdi-')) {
      return iconName.replace('mdi-', 'mdi:');
    }
    
    return `mdi:${iconName}`;
  }

  createPill(entity) {
    const name = this.getEntityName(entity);
    const icon = entity.icon ?? this.getEntityIcon(entity);
    const stateInfo = this.formatEntityState(entity);
    
    const formattedIcon = this.formatIconForUrl(icon);
    const iconUrl = `https://api.iconify.design/${formattedIcon}.svg`;
    
    let pillClass = 'pill';
    
    if (entity.error) {
      pillClass += ' error';
    } else {
      pillClass += ` state--${entity.state?.toLowerCase()}`;
    }
    
    return `
      <div class="${pillClass}" data-entity-id="${entity.entity_id || 'error'}">
        <div class="pill-icon">
          <img src="${iconUrl}" alt="${name}" onerror="this.style.display='none'">
        </div>
        <span class="pill-value value--xsmall ${stateInfo.isNumeric ? 'value--tnums' : ''}">${stateInfo.value}${stateInfo.unit ? ' ' + stateInfo.unit : ''}</span>
      </div>
    `;
  }

  createEntityCard(entity, label) {
    const name = this.getEntityName(entity);
    const icon = entity.icon ?? this.getEntityIcon(entity);
    const iconClass = this.getEntityIconClass(entity);
    const stateInfo = this.formatEntityState(entity);
    const deviceClassTitle = this.getDeviceClassTitle(entity);
    
    const baseCardClass = entity.error ? 'entity-card error' : 'entity-card';
    let cardClass = baseCardClass;

    if (this.entityStyle === 'detailed') {
      cardClass = `${baseCardClass} entity-card--detailed`;
    } else if (this.entityStyle === 'medium') {
      cardClass = `${baseCardClass} entity-card--medium`;
    }
    
    const formattedIcon = this.formatIconForUrl(icon);
    const iconUrl = `https://api.iconify.design/${formattedIcon}.svg`;
    
    if (this.entityStyle === 'detailed') {
      const lastUpdated = entity.last_updated ? (() => {
        const d = new Date(entity.last_updated);
        return d.toLocaleString(undefined, { month: 'numeric', day: 'numeric', hour: '2-digit', minute: '2-digit' });
      })() : ''; 
    
      return `
        <div class="${cardClass}" data-entity-id="${entity.entity_id || 'error'}" data-label="${label}">
          ${deviceClassTitle ? `<div class="device-class-title value value--xsmall">${deviceClassTitle}</div>` : ''}
          <div class="entity-header">
            <div class="${iconClass}"><img src="${iconUrl}" alt="${name}" onerror="this.style.display='none'"></div>
            <div class="entity-value value value--small ${stateInfo.isNumeric ? 'value--tnums' : ''} ${stateInfo.isError ? 'entity-error' : ''}">
              ${stateInfo.value}
              ${stateInfo.unit ? `<span class="entity-unit value value--xsmall">${stateInfo.unit}</span>` : ''}
            </div>
          </div>
          ${lastUpdated ? `<div class="entity-last-updated value value--xxsmall">Updated: ${lastUpdated}</div>` : ''}
        </div>
      `;
    }
    
    if (this.entityStyle === 'medium') {
      return `
        <div class="${cardClass}" data-entity-id="${entity.entity_id || 'error'}" data-label="${label}">
          ${deviceClassTitle ? `<div class="device-class-title value value--xsmall">${deviceClassTitle}</div>` : ''}
          <div class="entity-header">
            <div class="${iconClass}"><img src="${iconUrl}" alt="${name}" onerror="this.style.display='none'"></div>
            <div class="entity-value value value--small ${stateInfo.isNumeric ? 'value--tnums' : ''} ${stateInfo.isError ? 'entity-error' : ''}">
              ${stateInfo.value}
              ${stateInfo.unit ? `<span class="entity-unit value value--xsmall">${stateInfo.unit}</span>` : ''}
            </div>
          </div>
        </div>
      `;
    }
    
    // Simple style (original)
    return `
      <div class="${cardClass}" data-entity-id="${entity.entity_id || 'error'}" data-label="${label}">
        <div class="entity-header">
          <div class="${iconClass}"><img src="${iconUrl}" alt="${name}" onerror="this.style.display='none'"></div>
          <div class="entity-value value value--small ${stateInfo.isNumeric ? 'value--tnums' : ''} ${stateInfo.isError ? 'entity-error' : ''}">
            ${stateInfo.value}
            ${stateInfo.unit ? `<span class="entity-unit value value--xsmall">${stateInfo.unit}</span>` : ''}
          </div>
        </div>
      </div>
    `;
  }

  createPillsContainer(pillsByLabel) {
    if (!pillsByLabel || !pillsByLabel.pills || pillsByLabel.pills.length === 0) {
      return '';
    }
    
    const allPills = pillsByLabel.pills.map(pill => this.createPill(pill));
    
    if (allPills.length === 0) {
      return '';
    }
    
    return `
      <div class="pills-container pills-container--${this.pillPosition}">
        ${allPills.join('')}
      </div>
    `;
  }

  createEntitySection(label, entities) {
    const entitiesHtml = entities
      .map(entity => this.createEntityCard(entity, label))
      .join('');
    
    let gridClass = 'entities-grid';
    if (this.entityStyle === 'detailed') {
      gridClass = 'entities-grid--detailed';
    } else if (this.entityStyle === 'medium') {
      gridClass = 'entities-grid--medium';
    }
    
    return `
      <div class="entity-section" data-label="${label}">
        ${label !== '-' ? `<div class="section-header">
          <span class="value value--small">${label}</span>
        </div>` : ''}
        <div class="section-content">
          <div class="${gridClass}">
            ${entitiesHtml}
          </div>
        </div>
      </div>
    `;
  }

  render(responsesByLabel, pillsByLabel) {
    if (!this.container) {
      return;
    }

    this.container.innerHTML = '';

    const labels = Object.keys(responsesByLabel || {});
    const pillLabels = Object.keys(pillsByLabel || {});
    
    if (labels.length === 0 && pillLabels.length === 0) {
      this.renderEmptyState();
      return;
    }

    // Create pills container
    const pillsHtml = this.createPillsContainer(pillsByLabel);

    // Create entity sections
    let mainContentHtml = '';
    if (labels.length > 0) {
      const sections = labels.map(label => {
        const entities = responsesByLabel[label] || [];
        return this.createEntitySection(label, entities);
      });

      if (this.layout === 'sections') {
        const rows = [];
        for (let i = 0; i < sections.length; i += 2) {
          const sectionsInRow = sections.slice(i, i + 2);
          rows.push(`<div class="sections-row">${sectionsInRow.join('')}</div>`);
        }
        mainContentHtml = rows.join('');
      } else {
        mainContentHtml = `<div class="free-layout-container">${sections.join('')}</div>`;
      }
    }

    // Create the flex layout structure
    if (pillsHtml) {
      this.container.innerHTML = `
        ${pillsHtml}
        <div class="main-content">
          ${mainContentHtml}
        </div>
      `;
    } else {
      this.container.innerHTML = `
        <div class="main-content">
          ${mainContentHtml}
        </div>
      `;
    }
  }

  renderEmptyState() {
    this.container.innerHTML = `
      <div class="main-content">
        <div class="empty-state">
          <div class="empty-state-icon value value--xxxlarge">⚠</div>
          <h3 class="value value--large">No entities found</h3>
          <p class="value value--small">Check your Home Assistant configuration and ensure entities are properly configured.</p>
        </div>
      </div>
    `;
  }

  updateEntity(entityId, newData) {
    const card = this.container.querySelector(`[data-entity-id="${entityId}"]`);
    if (card) {
      const label = card.getAttribute('data-label');
      card.outerHTML = this.createEntityCard(newData, label);
    }
  }

  refresh(responsesByLabel, pillsByLabel) {
    this.render(responsesByLabel, pillsByLabel);
  }
}

function initializeHomeAssistantRenderer() {
  try {
    // Regular entities
    let entitiesList = `{{ trmnl.plugin_settings.custom_fields_values.entities | escape }}`;
    let entitiesLines = entitiesList.split('\n').filter(line => line.trim() !== '');
    let labels = entitiesLines.map(line => {
      if (line.includes(':')) {
        return line.split(':')[0].trim();
      }
      return 'Default';
    });

    // Pill entities (no labels, just entity IDs)
    let pillEntitiesList = `{{ trmnl.plugin_settings.custom_fields_values.pill_entities | escape }}`;
    let pillEntitiesLines = pillEntitiesList.split('\n').filter(line => line.trim() !== '');

    // Entity responses (IDX_0 to IDX_29 for regular entities)
    let responses = [
      {{ IDX_0 | json }}, {{ IDX_1 | json }}, {{ IDX_2 | json }}, {{ IDX_3 | json }}, 
      {{ IDX_4 | json }}, {{ IDX_5 | json }}, {{ IDX_6 | json }}, {{ IDX_7 | json }}, 
      {{ IDX_8 | json }}, {{ IDX_9 | json }}, {{ IDX_10 | json }}, {{ IDX_11 | json }}, 
      {{ IDX_12 | json }}, {{ IDX_13 | json }}, {{ IDX_14 | json }}, {{ IDX_15 | json }}, 
      {{ IDX_16 | json }}, {{ IDX_17 | json }}, {{ IDX_18 | json }}, {{ IDX_19 | json }}, 
      {{ IDX_20 | json }}, {{ IDX_21 | json }}, {{ IDX_22 | json }}, {{ IDX_23 | json }}, 
      {{ IDX_24 | json }}, {{ IDX_25 | json }}, {{ IDX_26 | json }}, {{ IDX_27 | json }}, 
      {{ IDX_28 | json }}, {{ IDX_29 | json }}
    ];

    // Pill responses (IDX_30 to IDX_34 for pill entities)
    let pillResponses = [
      {{ IDX_30 | json }}, {{ IDX_31 | json }}, {{ IDX_32 | json }}, {{ IDX_33 | json }}, 
      {{ IDX_34 | json }}
    ];
    
    // Process regular entities
    let validResponses = [];
    let validLabels = [];
    
    for (let i = 0; i < responses.length && i < labels.length; i++) {
      if (responses[i] !== null && responses[i] !== undefined) {
        validResponses.push(responses[i]);
        validLabels.push(labels[i]);
      }
    }

    const responsesByLabel = {};
    validLabels.forEach((label, index) => {
      if (!responsesByLabel[label]) {
        responsesByLabel[label] = [];
      }
      responsesByLabel[label].push(validResponses[index]);
    });

    // Process pill entities (no labels)
    let validPillResponses = [];
    
    for (let i = 0; i < pillResponses.length && i < pillEntitiesLines.length; i++) {
      if (pillResponses[i] !== null && pillResponses[i] !== undefined) {
        validPillResponses.push(pillResponses[i]);
      }
    }

    // Group all pills together (no labels)
    const pillsByLabel = {
      'pills': validPillResponses
    };

    const rootElement = document.getElementById('root');
    if (!rootElement) {
      return;
    }

    const renderer = new HomeAssistantRenderer('root');
    renderer.render(responsesByLabel, pillsByLabel);
  } catch (error) {
    const rootElement = document.getElementById('root');
    if (rootElement) {
      rootElement.innerHTML = `
        <div style="padding: 20px; text-align: center; color: #f44336;">
          <h3 class="value value--large">❌ Error Loading Home Assistant Data</h3>
          <p class="value value--small">Please check the browser console for details.</p>
          <pre class="value value--xsmall" style="background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 4px; text-align: left; overflow: auto;">${error.message}</pre>
        </div>
      `;
    }
  }
}
</script>

<div id="root">
  <!-- Entities will be rendered here -->
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {  
  try {
    initializeHomeAssistantRenderer();
    
    if (window.trmnl) {
      window.trmnl.ready();
    } else {
      document.dispatchEvent(new CustomEvent('trmnl-ready'));
      
      window.trmnlReady = true;
    }
  } catch (error) {    
    if (window.trmnl) {
      window.trmnl.ready();
    } else {
      document.dispatchEvent(new CustomEvent('trmnl-ready'));
      window.trmnlReady = true;
    }
  }
});

if (document.readyState === 'complete' || document.readyState === 'interactive') {
  setTimeout(() => {
    try {
      initializeHomeAssistantRenderer();
      
      if (window.trmnl) {
        window.trmnl.ready();
      } else {
        document.dispatchEvent(new CustomEvent('trmnl-ready'));
        window.trmnlReady = true;
      }
    } catch (error) {
      if (window.trmnl) {
        window.trmnl.ready();
      } else {
        document.dispatchEvent(new CustomEvent('trmnl-ready'));
        window.trmnlReady = true;
      }
    }
  }, 100);
}
</script>
